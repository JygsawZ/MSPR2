generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

model User {
  id        Int    @id @default(autoincrement())
  email     String @unique
  password  String
  firstName String
  lastName  String
  role      Role   @default(USER) // Défaut : utilisateur normal
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tag {
  id    Int    @id @default(autoincrement())
  name  String @unique
  artists ArtistTag[]
}



model Artist {
  id          Int      @id @default(autoincrement())
  name        String   
  description String   
  imageUrl    String?  
  sceneId     Int? 
  scene       Scene?  @relation(fields: [sceneId], references: [id])
  runningOrders RunningOrder[]
  meetings     Meeting[]
  tags         ArtistTag[]
  createdAt   DateTime @default(now())              
  updatedAt   DateTime @updatedAt                   
}

model ArtistTag {
  artistId Int
  tagId    Int
  artist   Artist @relation(fields: [artistId], references: [id])
  tag      Tag    @relation(fields: [tagId], references: [id])
  @@id([artistId, tagId])
}

model RunningOrder {
  id          Int      @id @default(autoincrement())
  artistId    Int      
  artist      Artist   @relation(fields: [artistId], references: [id])
  startTime   DateTime
  endTime     DateTime 
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt                    
}


model Category {
  id   Int    @id @default(autoincrement())
  name String @unique
  products Product[]
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String   
  description String   
  price       Float    
  quantity    Int      
  image_url   String?  
  categoryId  Int
  category    Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())  
  updatedAt   DateTime @updatedAt      
}

model Meeting {
  id          Int   @id @default(autoincrement())
  artistId    Int  
  artist      Artist?  @relation(fields: [artistId], references: [id], onDelete: Cascade)
  date        DateTime
  lieuId      Int
  lieu        Location @relation(fields: [lieuId], references: [id], onDelete: Cascade)
}

model Location {
  id          Int   @id @default(autoincrement())
  nom         String
  type        String   // Ex: "scène", "restaurant", "toilettes"
  description String?
  latitude    Float
  longitude   Float
  meetings    Meeting[]
}

model Scene {
  id          Int   @id @default(autoincrement())
  name        String
  description String?
  latitude    Float
  longitude   Float
  artists     Artist[]
}