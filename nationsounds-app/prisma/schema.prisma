generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  role      String   @default("USER")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Tag {
  id          Int         @id @default(autoincrement())
  name        String      @unique
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  artists     ArtistTag[]

  @@map("tags")
}

model Artist {
  id           Int            @id @default(autoincrement())
  name         String
  description  String?
  image        String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  tags         ArtistTag[]
  runningOrders RunningOrder[]
  scene        Scene?         @relation(fields: [sceneId], references: [id])
  sceneId      Int?

  @@map("artists")
}

model ArtistTag {
  artist    Artist    @relation(fields: [artistId], references: [id])
  artistId  Int
  tag       Tag       @relation(fields: [tagId], references: [id])
  tagId     Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@id([artistId, tagId])
  @@map("artist_tags")
}

model RunningOrder {
  id        Int      @id @default(autoincrement())
  artist    Artist   @relation(fields: [artistId], references: [id])
  artistId  Int
  scene     Scene    @relation(fields: [sceneId], references: [id])
  sceneId   Int
  startTime DateTime
  endTime   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("running_orders")
}

model Category {
  id   Int    @id @default(autoincrement())
  name String @unique
  products Product[]
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String   
  description String   
  price       Float    
  quantity    Int      
  image_url   String?  
  categoryId  Int
  category    Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())  
  updatedAt   DateTime @updatedAt      
}

model Location {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  latitude    Float
  longitude   Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("locations")
}

model Scene {
  id           Int            @id @default(autoincrement())
  name         String
  description  String?
  latitude     Float
  longitude    Float
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  artists      Artist[]
  runningOrders RunningOrder[]

  @@map("scenes")
}